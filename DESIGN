# cpe102project
actions.py (The resaon why I still have the majority of these functions still there is because 
when I tried to create a general program for them, I didn't have enough time to make it work.
In addition, some of the functions had global variables that I felt were not necessary to move 
over to another file because it would only make the actions file useless, as there would only 
be 3-4 functions inside it.  I kept the transfer miners functions here as I couldn't 
determine a solid place to put them in entities, whether one went with the MinerNotFull or the 
MinerFull class.)
create_miner_not_full_action(world, entity, i_store) - gives access to action
--> action(current_ticks) - set of actions when miner does not have enough ore
create_miner_full_action(world, entity, i_store) - gives access to action
--> action(current_ticks) - set of actions when miner has enough ore
create_ore_blob_action(world, entity, i_store) - gives access to action
-->action(current_ticks) - set next action depending on # of ticks
find_open_around(world, pt, distance) - returns new point within bounds and not occupied
create_vein_action(world, entity, i_store) - gives access to action
--> action(current_ticks) - creates ore at a certain time
try_transform_miner_not_full(world, entity) - transforms miner to new miner with full inventory
try_transform_miner(world, entity, transform) - transforms miner to specified transformation
create_miner_action(world, entity, image_store) - determines action if full or not
create_animation_action(world, entity, repeat_count) - gives access to action
--> action(current_ticks) - animation for entity
create_entity_death_action(world, entity) - gives access action
--> action(current_ticks) - removes entity from world
create_ore_transform_action(world, entity) - gives access action
--> action(current_ticks) - transforms ore to blob 
remove_entity(world, entity) - removes entity and unschedules events
create_blob(world, name, pt, rate, ticks, i_store) - creates a new blob and schedules events
schedule_blob(world, blob, ticks, i_store) - schedules action for blob
schedule_miner(world, miner, ticks, i_store) - schedules action for miner
schedule_ore(world, ore, ticks, i_store) - schedules action for ore
schedule_vein(world, vein, ticks, i_store) - schedules action for vein
schedule_quake(world, quake, ticks) - schedules action for quake
schedule_action(world, entity, action, time) - schedules action 
create_ore(world, name, pt, ticks, i_store) - creates new ore
create_quake(world, name, pt, ticks, i_store) - creates new quake
create_vein(world, name, pt, ticks, i_store) - creates new vein
clear_pending_action(world, entity) - unschedule an event

builder_controller.py (I kept the same functionality in this file mainly due to the fact that
4 different files are called in some of the functions, in which a change in these functions
to a method in a class seemed like a waste of time.)
mouse_to_tile(pos, tile_width, tile_height) - returns mouse location
save_world(world, filename) - saves world
load_world(world, i_store, filename) - loads a new world
on_keydown(event, world, entity_select, i_store) - returns input key value
handle_mouse_motion(view, event) - follows the mouse
handle_keydown(view, event, i_store, world, entity_select) - handles mouse click
create_new_entity(pt, entity_select, i_store) - creates new entity at location
is_background_tile(entity_select) - determines if background tile
handle_mouse_button(view, world, event, entity_select, i_store) - moves background
activity_loop(view, world, i_store) - determines if input will affect will change

builder.py (Same reason as builder_controller, there are too many outside function calls
to make a change worthwhile.)
create_default_background(img) - returns default image
main() - runs program to set up background image

controller.py (This function mostly deals with the interaction with the user, so there was
no reason to put the functions into methods) 
on_keydown(event) - changes x_delta, y_delta
mouse_to_tile(pos, tile_width, tile_height) - returns point mouse in on
handle_timer_event(world, view) - update entity to timed event
handle_mouse_motion(view, event) - uses mouse to move screen
handle_keydown(view, event) - update view on keydown
activity_loop(view, world) - determines type of event previously specified

entities.py (I put the functions into the according methods based on their parameters. I
moved the sign and adjacent functions from actions.py due to its lack of use in that
file.  I also kept the get_image outside the classes as there was a function call 
elsewhere - I forget at the moment - where the object called as a parameter may not
have been a class, so I kept it outside to avoid crashing the game.  I also kept 
entitystring  becuase of a lack of time to figure out a better method.)
Background(name, imgs)
     get_images(self)
     get_image(self)
     get_name(self)
     next_image(self)

MinerNotFull(self, name, resource_limit, position, rate, imgs, animation_rate)
     next_position(self, world, dest_pt)
     set_position(self, point)
     get_position(self)
     get_images(self)
     get_image(self)
     get_rate(self)
     set_resource_count(self, n)
     get_resource_count(self)
     get_resource_limit(self)
     get_name(self)
     get_animation_rate(self)
     remove_pending_action(self, action)
     add_pending_action(self, action)
     get_pending_actions(self)
     clear_pending_actions(self)
     next_image(self)
     miner_to_ore(world, entity, ore) - only an action non-full miners take

MinerFull(self, name, resource_limit, position, rate, imgs, animation_rate)
     next_position(self, world, dest_pt)
     set_position(self, point)
     get_position(self)
     get_images(self)
     get_image(self)
     get_rate(self)
     set_resource_count(self, n)
     get_resource_count(self)
     get_resource_limit(self)
     get_name(self)
     get_animation_rate(self)
     remove_pending_action(self, action)
     add_pending_action(self, action)
     get_pending_actions(self)
     clear_pending_actions(self)
     next_image(self)
     miner_to_smith(self, world, smith) - only action full miners take

Vein(self, name, rate, position, imgs, resource_distance=1)
     next_position(self, world, dest_pt)
     set_position(self, point)
     get_position(self)
     get_images(self)
     get_image(self)
     get_rate(self)
     get_resource_distance(self)
     get_name(self)
     remove_pending_action(self, action)
     add_pending_action(self, action)
     get_pending_actions(self)
     clear_pending_actions(self)
     next_image(self)

OreBlob(self, name, position, imgs, rate=5000)
     set_position(self, point)
     get_position(self)
     get_images(self)
     get_image(self)
     get_rate(self)
     get_name(self)
     remove_pending_action(self, action)
     add_pending_action(self, action)
     get_pending_actions(self)
     clear_pending_actions(self)
     next_image(self)
     blob_to_vein(world, entity, vein) - decided to move this as it made sense when
I transferred over the adjacent function to entities.py

Blacksmith(self, name, position, imgs, resource_limit, rate, resource_distance=1)
     set_position(self, point)
     get_position(self)
     get_images(self)
     get_image(self)
     get_rate(self)
     set_resource_count(self, n)
     get_resource_count(self)
     get_resource_limit(self)
     get_resource_distance(self)
     get_name(self)
     remove_pending_action(self, action)
     add_pending_action(self, action)
     get_pending_actions(self)
     clear_pending_actions(self)
     next_image(self)

Obstacle(self, name, position, imgs)
     set_position(self, point)
     get_position(self)
     get_images(self)
     get_image(self)
     get_name(self)

OreBlob(self, name, position, rate, imgs, animation_rate)
     next_position(self, world, dest_pt)
     set_position(self, point)
     get_position(self)
     get_images(self)
     get_image(self)
     get_rate(self)
     get_resource_distance(self)
     get_name(self)
     get_animation_rate(self)
     remove_pending_action(self, action)
     add_pending_action(self, action)
     get_pending_actions(self)
     clear_pending_actions(self)
     next_image(self)

Quake(self, name, position, imgs, animation_rate)
     set_position(self, point)
     get_position(self)
     get_images(self)
     get_image(self)
     get_name(self)
     get_animation_rate(self)
     remove_pending_action(self, action) 
     add_pending_action(self, action)
     get_pending_actions(self)
     clear_pending_actions(self)
     next_image(self)
sign(x)
adjacent(pt1, pt2) 
get_image(entity)
entity_string(entity) 

image_store.py (Deals with images outside in the file, which did not appear
to need a class associated with it)
create_default_image(tile_width, tile_height) - creates default background
load_images(filename, tile_width, tile_height) - load images of each tile
process_image_line(images, line) - gets image for each object in line
get_images_internal(images, key)
get_images(images, key)

main.py (I don't liek programming classes inside my main.py file; just
a personal preference.)
create_default_background(img)
load_world(world, i_store, filename)
main()

occ_grid.py (I changed the two functions into methods inside Grid because
it was simple enough to code.  They work well when inside the class.)
Grid(width, height, occupance_value)
     set_cell(self, point, value)
     get_cell(self, point)

ordered_list.py (The functions were already methods inside the class, so 
no changes were necessary.)
OrderedList)
     insert(item, ord)
     remove(item)
     head()
     pop()
ListItem(item, ord)
     eq(a, b)

point.py (Just a class call, nothing needed)
Point(x, y)

save_load.py (I debated using a class to organize the function calls for the
objects, but it was already assorted inside worldmodel, so I decided against
it.)
save_world(world, file)
save_entities(world, file)
save_background(world, file)
load_world(world, images, file, run=False)
add_background(world, properties, i_store)
add_entity(world, properties, i_store, run)
create_from_properties(properties, i_store)
create_miner(properties, i_store)
create_vein(properties, i_store)
create_ore(properties, i_store)
create_blacksmith(properties, i_store)
create_obstacle(properties, i_store)
schedule_entity(world, entity, i_store)

worldmodel.py (Although some of the functions here call upon other methods
in the class, I felt that it would not be worth it to change it back after
I had already changed everything.  I kept distance_sq and nearest_entity 
as helper functions as it doesn't serve a specific purpose inside 
WorldModel.)
WorldModel(num_rows, num_cols, background)
     within_bounds(self, pt)
     is_occupied(self, pt)
     get_background_image(self, pt)
     get_background(self, pt)
     set_background(self, pt, bgnd)
     get_tile_occupant(self, pt)
     get_entities(self)
     find_nearest(self, pt, type)
     add_entity(self, entity)     
     move_entity(self, entity, pt)
     remove_entity(self, entity)
     remove_entity_at(self, pt)
     schedule_action(self, action, time)
     unschedule_action(self, action)
     update_on_time(self, ticks)
nearest_entity(entity_dists)
distance_sq(p1, p2)

worldview.py (Similar reasons as above, I felt that even though some functions called
upon themselves, I decided to keep the changes because the game worked.  I also kept
clammp as a helper function.) 
WorldView(view_cols, view_rows, screen, world, tile_width, tile_height, mouse_img=None)
   viewport_to_world(self, pt)
   world_to_viewport(self, pt)
   create_shifted_viewport(self, delta, num_rows, num_cols)
   draw_background(self)
   draw_entities(self)
   draw_viewport(self)
   update_view(self, view_delta=(0,0), mouse_img=None)
   update_view_tiles(self, tiles)
   update_tile(self, view_tile_pt, surface)
   get_tile_image(self, view_tile_pt)
   create_mouse_surface(self, occupied)
   update_mouse_cursor(self)
   mouse_move(self, new_mouse_pt)
clamp(v, low, high)
